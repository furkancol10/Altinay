@page "/project-groups"
@using Blazorise
@using Altinay.ProjectGroups
@using Altinay.Projects
@using Altinay.Files
@using Altinay.Localization
@using Volo.Abp.AspNetCore.Components.Web
@inherits AltinayComponentBase
@inject IProjectGroupAppService ProjectGroupAppService
@inject IProjectAppService ProjectAppService
@inject IFileAppService FileAppService
@inject AbpBlazorMessageLocalizerHelper<AltinayResource> LH

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["ProjectGroups"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (CanCreateProjectGroup)
                {
                    <Button Color="Color.Primary" Clicked="OpenCreateProjectGroupModal">
                        @L["NewProjectGroup"]
                    </Button>
                }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="ProjectGroupDto"
                  Data="ProjectGroupList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="ProjectGroupDto"
                                Field="@nameof(ProjectGroupDto.Id)"
                                Sortable="false"
                                Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (CanEditProjectGroup)
                                {
                                    <DropdownItem Clicked="() => OpenEditProjectGroupModal(context)">
                                        @L["Edit"]
                                    </DropdownItem>
                                }
                                @if (CanDeleteProjectGroup)
                                {
                                    <DropdownItem Clicked="() => DeleteProjectGroupAsync(context)">
                                        @L["Delete"]
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>

                <!-- Adjust these columns to show names if your DTO exposes them -->
                <DataGridColumn TItem="ProjectGroupDto" Field="@nameof(ProjectGroupDto.ProjectId)" Caption="@L["Project"]" />
                <DataGridColumn TItem="ProjectGroupDto" Field="@nameof(ProjectGroupDto.FileAliasId)" Caption="@L["FileAlias"]" />
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<!-- Create Modal -->
<Modal @ref="CreateProjectGroupModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewProjectGroup"]</ModalTitle>
                <CloseButton Clicked="CloseCreateProjectGroupModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="CreateValidationsRef" Model="@NewProjectGroup" ValidateOnLoad="false">
                    <Field>
                        <FieldLabel>@L["Project"]</FieldLabel>
                        <Select TValue="Guid" @bind-Value="NewProjectGroup.ProjectId" Class="form-control">
                            @if (ProjectList?.Any() == true)
                            {
                                foreach (var project in ProjectList)
                                {
                                    <option value="@project.Id">@project.ProjectName</option>
                                }
                            }
                            else
                            {
                                <option disabled>@L["NoProjectsAvailable"]</option>
                            }
                        </Select>
                        <ValidationMessage For="@(() => NewProjectGroup.ProjectId)" />
                    </Field>

                    <Field>
                        <FieldLabel>@L["FileAlias"]</FieldLabel>
                        <Select TValue="Guid" @bind-Value="NewProjectGroup.FileAliasId" Class="form-control">
                            @if (FileList?.Any() == true)
                            {
                                foreach (var file in FileList)
                                {
                                    <option value="@file.Id">@file.FileAlias</option>
                                }
                            }
                            else
                            {
                                <option disabled>@L["NoFilesAvailable"]</option>
                            }
                        </Select>
                        <ValidationMessage For="@(() => NewProjectGroup.FileAliasId)" />
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseCreateProjectGroupModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateProjectGroupAsync"
                        Disabled="@(ProjectList is null || ProjectList.Count == 0 || FileList is null || FileList.Count == 0)">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<!-- Edit Modal -->
<Modal @ref="EditProjectGroupModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["EditProjectGroup"]</ModalTitle>
                <CloseButton Clicked="CloseEditProjectGroupModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="EditValidationsRef" Model="@EditingProjectGroup" ValidateOnLoad="false">
                    <Field>
                        <FieldLabel>@L["Project"]</FieldLabel>
                        <Select TValue="Guid" @bind-Value="EditingProjectGroup.ProjectId" Class="form-control">
                            @if (ProjectList?.Any() == true)
                            {
                                foreach (var project in ProjectList)
                                {
                                    <option value="@project.Id">@project.ProjectName</option>
                                }
                            }
                            else
                            {
                                <option disabled>@L["NoProjectsAvailable"]</option>
                            }
                        </Select>
                        <ValidationMessage For="@(() => EditingProjectGroup.ProjectId)" />
                    </Field>

                    <Field>
                        <FieldLabel>@L["FileAlias"]</FieldLabel>
                        <Select TValue="Guid" @bind-Value="EditingProjectGroup.FileAliasId" Class="form-control">
                            @if (FileList?.Any() == true)
                            {
                                foreach (var file in FileList)
                                {
                                    <option value="@file.Id">@file.FileAlias</option>
                                }
                            }
                            else
                            {
                                <option disabled>@L["NoFilesAvailable"]</option>
                            }
                        </Select>
                        <ValidationMessage For="@(() => EditingProjectGroup.FileAliasId)" />
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseEditProjectGroupModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateProjectGroupAsync"
                        Disabled="@(ProjectList is null || ProjectList.Count == 0 || FileList is null || FileList.Count == 0)">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    // All logic is in the code-behind .razor.cs file
}
