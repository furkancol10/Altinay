@page "/personel-requests"
@using Personel
@using Enums
@using Volo.Abp
@using Volo.Abp.Application.Dtos
@using Volo.Abp.AspNetCore.Components.Web
@using Blazorise
@using Localization
@inject IDepartmentAppService DepartmentAppService
@inject IManagerAppService ManagerAppService
@inject AbpBlazorMessageLocalizerHelper<Localization.AltinayResource> LH
@inherits AbpCrudPageBase<IPersonelRequestAppService, PersonelRequestDto, Guid, PersonelRequestInputListDto, CreateUpdatePersonelRequestDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["PersonelRequests"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="OpenCreateModalAsync">
                    @L["NewRequest"]
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="PersonelRequestDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  CurrentPage="CurrentPage"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="PersonelRequestDto" @ref="EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="PersonelRequestDto" EntityActionsColumn="EntityActionsColumn">
                            <EntityAction TItem="PersonelRequestDto"
                                          Text="@L["Preview"]"
                                          Icon="IconName.Search"
                                          Clicked="() => OpenPreviewModalAsync(context)" />
                            <EntityAction TItem="PersonelRequestDto"
                                          Text="@L["Delete"]"
                                          Visible=HasDeletePermission
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="()=>GetDeleteConfirmationMessage(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="PersonelRequestDto"
                                Field="@nameof(PersonelRequestDto.JobTitle)"
                                Caption="@L["JobTitle"]" />
                <DataGridColumn TItem="PersonelRequestDto"
                                Field="@nameof(PersonelRequestDto.RequestType)"
                                Caption="@L["RequestType"]">
                    <DisplayTemplate>
                        @L[$"{context.RequestType}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="PersonelRequestDto"
                                Field="@nameof(PersonelRequestDto.Location)"
                                Caption="@L["Location"]" />
                <DataGridColumn TItem="PersonelRequestDto"
                                Field="@nameof(PersonelRequestDto.RequestDate)"
                                Caption="@L["RequestDate"]">
                    <DisplayTemplate>
                        @context.RequestDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="PersonelRequestDto"
                                Field="@nameof(PersonelRequestDto.RequesterName)"
                                Caption="@L["RequesterName"]" />
                <DataGridColumn TItem="PersonelRequestDto"
                                Field="@nameof(PersonelRequestDto.RequestStatus)"
                                Caption="@L["RequestStatus"]">
                    <DisplayTemplate>
                        @L[$"{context.RequestStatus}"]
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@CreateModal">    
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewRequest"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Field>
                        <FieldLabel RequiredIndicator>@L["JobTitle"]</FieldLabel>
                        <TextEdit @bind-Text="NewEntity.JobTitle">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel RequiredIndicator>@L["Manager"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="NewEntity.ManagerId">
                            @foreach (var manager in managerList)
                            {
                                <SelectItem TValue="Guid" Value=@manager.Id>
                                    @manager.Name
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel RequiredIndicator>@L["Department"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="NewEntity.DepartmentId">
                            @foreach (var department in departmentList)
                            {
                                <SelectItem TValue="Guid" Value=@department.Id>
                                    @department.Name
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel RequiredIndicator>@L["NumberOfPersonel"]</FieldLabel>
                        <NumericEdit TValue="int" @bind-Value="NewEntity.NumberOfPersonel" />
                    </Field>
                    <Field>
                        <FieldLabel RequiredIndicator>@L["RequestReason"]</FieldLabel>
                        <TextEdit @bind-Text="@NewEntity.RequestReason">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel RequiredIndicator>@L["RequestDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="NewEntity.RequestDate" />
                    </Field>
                    @*
                    //
                    //Talep Türü Seçimi
                    //
                    *@                    
                    <Field>
                        <FieldLabel>@L["RequestType"]</FieldLabel>
                        <Select TValue="RequestType" @bind-SelectedValue="@NewEntity.RequestType">
                            @foreach (RequestType rt in Enum.GetValues(typeof(RequestType)))
                            {
                                <SelectItem TValue="RequestType" Value="@rt">
                                    @L[$"{rt}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    @*
                    //
                    //Giden ve Yerine Gelen Personel Bilgileri
                    //
                    *@
                    @if (NewEntity.RequestType == RequestType.Replacement)
                    {
                        <Field>
                            <FieldLabel RequiredIndicator>@L["ReplacementPersonName"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.ReplacementPersonName">
                                <Feedback><ValidationError /></Feedback>
                            </TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel RequiredIndicator>@L["LeavingDate"]</FieldLabel>
                            <DateEdit TValue="DateTime?" @bind-Date="NewEntity.LeavingDate" />
                        </Field>
                        <Field>
                            <FieldLabel RequiredIndicator>@L["ReasonForLeaving"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.ReasonForLeaving" />
                        </Field>
                    }
                    @*
                    //
                    //Plan Dahilinde Yeni Pozisyona Gelen Personel Bilgileri
                    //
                    *@
                    @if (NewEntity.RequestType == RequestType.NewPosition_InPlan)
                    {

                    }
                    @*
                    //
                    //Plan Haricinde Yeni Pozisyona Gelen Personel Bilgileri
                    //
                    *@
                    @if (NewEntity.RequestType == RequestType.NewPosition_OutPlan)
                    {
                        <Field>
                            <FieldLabel>@L["ReasonForNewPosition"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.ReasonForNewPosition">
                                <Feedback><ValidationError /></Feedback>
                            </TextEdit>
                        </Field>
                    }
                    @*
                    //
                    //Yaş Aralığı
                    //
                    *@
                    <Field>
                        <FieldLabel Class="text-center fw-bold">@L["RequestedPersonelInformation"]</FieldLabel>
                    </Field>
                    <Fields>
                        <Field>
                            <FieldLabel RequiredIndicator>@L["MinAge"]</FieldLabel>
                            <NumericEdit TValue="int" @bind-Value="NewEntity.MinAge">
                                <Feedback><ValidationError /></Feedback>
                            </NumericEdit>
                        </Field>
                        <Field>
                            <FieldLabel RequiredIndicator>@L["MaxAge"]</FieldLabel>
                            <NumericEdit TValue="int" @bind-Value="NewEntity.MaxAge">
                                <Feedback><ValidationError /></Feedback>
                            </NumericEdit>
                        </Field>
                    </Fields>
                    @*
                    //
                    //Cinsiyet
                    //
                    *@
                    <Field>
                        <FieldLabel RequiredIndicator>@L["Gender"]</FieldLabel>
                        <Select TValue="Gender" @bind-SelectedValue="@NewEntity.Gender">
                            @foreach (Gender gender in Enum.GetValues(typeof(Gender)))
                            {
                                <SelectItem TValue="Gender" Value="@gender">
                                    @L[$"{gender}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    @*
                    //
                    //İkamet Adresi
                    //
                    *@
                    <Field>
                        <FieldLabel RequiredIndicator>@L["Location"]</FieldLabel>
                        <TextEdit @bind-Text="@NewEntity.Location">
                            <Feedback><ValidationError /></Feedback>
                        </TextEdit>
                    </Field>
                    @*
                    //
                    //Deneyim Durumu
                    //
                    *@
                    <Field>
                        <FieldLabel RequiredIndicator>@L["ExperienceStatus"]</FieldLabel>
                        <Select TValue="ExperienceStatus" @bind-SelectedValue="@NewEntity.ExperienceStatus">
                            @foreach (ExperienceStatus es in Enum.GetValues(typeof(ExperienceStatus)))
                            {
                                <SelectItem TValue="ExperienceStatus" Value="@es">
                                    @L[$"{es}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    @*
                    //
                    //Gerekli Nitelikler
                    //
                    *@
                    <Field>
                        <FieldLabel RequiredIndicator>@L["OtherQualifications"]</FieldLabel>
                        <FieldBody>
                            <Addons>
                                <TextEdit @bind-Text="NewQualification" />
                                <Addon AddonType="AddonType.End">
                                    <Button Color="Color.Primary" Clicked="AddQualification">
                                        Add
                                    </Button>
                                </Addon>
                            </Addons>

                            @if (NewEntity.OtherQualifications?.Any() == true)
                            {
                                <Table>
                                    <TableHeader>
                                        <TableRow>
                                            <TableHeaderCell>#</TableHeaderCell>
                                            <TableHeaderCell>Qualification</TableHeaderCell>
                                        </TableRow>
                                    </TableHeader>
                                    <TableBody>
                                        @foreach (var item in NewEntity.OtherQualifications.Select((value, index) => new { value, index }))
                                        {

                                            <TableRow>
                                                <TableRowHeader>@(item.index + 1)</TableRowHeader>
                                                <TableRowHeader>@item.value</TableRowHeader>
                                                <Button Size="Size.ExtraSmall"
                                                        Color="Color.Danger"
                                                        Clicked="@(() => RemoveQualification(item.value))" Class="ms-0">
                                                    <Icon Name="IconName.Delete" />
                                                    <Icon IconSize="IconSize.ExtraSmall" />
                                                </Button>
                                            </TableRow>

                                        }
                                    </TableBody>
                                </Table>
                            }
                        </FieldBody>
                    </Field>
                    @*
                    //
                    //Önerilen Aday Varsa
                    //
                    *@
                    <Field>
                        <FieldLabel>@L["HasSuggestedPersonel"]</FieldLabel>
                        <FieldBody>
                            <RadioGroup TValue="bool" @bind-CheckedValue="HasSuggestedPersonel">
                                <Radio Value="true">Yes</Radio>
                                <Radio Value="false">No</Radio>
                            </RadioGroup>
                        </FieldBody>
                    </Field>
                    @if (HasSuggestedPersonel)
                    {
                        <Field>
                            <FieldLabel>@L["SuggestedPersonelName"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.SuggestedPersonelName" />
                        </Field>
                        <Field>
                            <FieldLabel>@L["SuggestedJobTitle"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.SuggestedJobTitle" />
                        </Field>
                        <Field>
                            <FieldLabel>@L["ReasonForSuggestion"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.ReasonForSuggestion" />
                        </Field>
                    }
                    <Field>
                        <FieldLabel RequiredIndicator>@L["RequesterName"]</FieldLabel>
                        <TextEdit @bind-Text="@NewEntity.RequesterName" />
                    </Field>
                    <Field>
                        <FieldLabel RequiredIndicator>@L["RequesterTitle"]</FieldLabel>
                        <TextEdit @bind-Text="@NewEntity.RequesterTitle" />
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="PreviewModalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Request Preview</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel RequiredIndicator>@L["JobTitle"]</FieldLabel>
                <TextEdit Text="@PreviewEntity.JobTitle" ReadOnly="true" />
            </Field>
            <Field>
                <FieldLabel RequiredIndicator>@L["Manager"]</FieldLabel>
                <Select TValue="Guid" SelectedValue="@PreviewEntity.ManagerId" ReadOnly="true">
                    @foreach (var manager in managerList)
                    {
                        <SelectItem TValue="Guid" Value=@manager.Id>
                            @manager.Name
                        </SelectItem>
                    }
                </Select>
            </Field>
            <Field>
                <FieldLabel RequiredIndicator>@L["Department"]</FieldLabel>
                <Select TValue="Guid" SelectedValue="@PreviewEntity.DepartmentId" ReadOnly="true">
                    @foreach (var department in departmentList)
                    {
                        <SelectItem TValue="Guid" Value=@department.Id>
                            @department.Name
                        </SelectItem>
                    }
                </Select>
            </Field>
            <Field>
                <FieldLabel RequiredIndicator>@L["NumberOfPersonel"]</FieldLabel>
                <NumericEdit TValue="int" Value="@PreviewEntity.NumberOfPersonel" ReadOnly="true" />
            </Field>
            <Field>
                <FieldLabel RequiredIndicator>@L["RequestReason"]</FieldLabel>
                <TextEdit Text="@PreviewEntity.RequestReason" ReadOnly="true" />
            </Field>
            <Field>
                <FieldLabel RequiredIndicator>@L["RequestDate"]</FieldLabel>
                <DateEdit TValue="DateTime" Date="@PreviewEntity.RequestDate" ReadOnly="true" />
            </Field>
            <Field>
                <FieldLabel>@L["RequestType"]</FieldLabel>
                <Select TValue="RequestType" SelectedValue="@PreviewEntity.RequestType" ReadOnly="true">
                    @foreach (RequestType rt in Enum.GetValues(typeof(RequestType)))
                    {
                        <SelectItem TValue="RequestType" Value="@rt">
                            @L[$"{rt}"]
                        </SelectItem>
                    }
                </Select>
            </Field>
            @if (PreviewEntity.RequestType == RequestType.Replacement)
            {
                <Field>
                    <FieldLabel RequiredIndicator>@L["ReplacementPersonName"]</FieldLabel>
                    <TextEdit Text="@PreviewEntity.ReplacementPersonName" ReadOnly="true" />
                </Field>
                <Field>
                    <FieldLabel RequiredIndicator>@L["LeavingDate"]</FieldLabel>
                    <DateEdit TValue="DateTime?" Date="@PreviewEntity.LeavingDate" ReadOnly="true" />
                </Field>
                <Field>
                    <FieldLabel RequiredIndicator>@L["ReasonForLeaving"]</FieldLabel>
                    <TextEdit Text="@PreviewEntity.ReasonForLeaving" ReadOnly="true" />
                </Field>
            }
            @if (PreviewEntity.RequestType == RequestType.NewPosition_InPlan)
            {

            }
            @if (PreviewEntity.RequestType == RequestType.NewPosition_OutPlan)
            {
                <Field>
                    <FieldLabel>@L["ReasonForNewPosition"]</FieldLabel>
                    <TextEdit Text="@PreviewEntity.ReasonForNewPosition" ReadOnly="true" />
                </Field>
            }
            <Field>
                <FieldLabel Class="fw-bold">@L["RequestedPersonelInformation"]</FieldLabel>
            </Field>
            <Fields>
                <Field>
                    <FieldLabel RequiredIndicator>@L["MinAge"]</FieldLabel>
                    <NumericEdit TValue="int" Value="@PreviewEntity.MinAge" ReadOnly="true" />
                </Field>
                <Field>
                    <FieldLabel RequiredIndicator>@L["MaxAge"]</FieldLabel>
                    <NumericEdit TValue="int" Value="@PreviewEntity.MaxAge" ReadOnly="true" />
                </Field>
            </Fields>
            <Field>
                <FieldLabel RequiredIndicator>@L["Gender"]</FieldLabel>
                <Select TValue="Gender" SelectedValue="@PreviewEntity.Gender" ReadOnly="true">
                    @foreach (Gender gender in Enum.GetValues(typeof(Gender)))
                    {
                        <SelectItem TValue="Gender" Value="@gender">
                            @L[$"{gender}"]
                        </SelectItem>
                    }
                </Select>
            </Field>
            <Field>
                <FieldLabel RequiredIndicator>@L["Location"]</FieldLabel>
                <TextEdit Text="@PreviewEntity.Location" ReadOnly="true">
                    <Feedback><ValidationError /></Feedback>
                </TextEdit>
            </Field>
            <Field>
                <FieldLabel RequiredIndicator>@L["ExperienceStatus"]</FieldLabel>
                <Select TValue="ExperienceStatus" SelectedValue="@PreviewEntity.ExperienceStatus" ReadOnly="true">
                    @foreach (ExperienceStatus es in Enum.GetValues(typeof(ExperienceStatus)))
                    {
                        <SelectItem TValue="ExperienceStatus" Value="@es">
                            @L[$"{es}"]
                        </SelectItem>
                    }
                </Select>
            </Field>
            <Field>
                <FieldLabel RequiredIndicator>@L["OtherQualifications"]</FieldLabel>
                <FieldBody>
                    <Addons>
                        <TextEdit Text="@NewQualification" Disabled="true" />
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell>#</TableHeaderCell>
                                    <TableHeaderCell>Qualification</TableHeaderCell>
                                </TableRow>
                            </TableHeader>


                            @if (PreviewEntity.OtherQualifications?.Any() == true)
                            {
                                <TableBody>
                                    @foreach (var item in PreviewEntity.OtherQualifications.Select((value, index) => new { value, index }))
                                    {

                                        <TableRow>
                                            <TableRowHeader>@(item.index + 1)</TableRowHeader>
                                            <TableRowHeader>@item.value</TableRowHeader>
                                        </TableRow>

                                    }
                                </TableBody>
                            }
                        </Table>
                    </Addons>
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>@L["HasSuggestedPersonel"]</FieldLabel>
                <FieldBody>
                    <RadioGroup TValue="bool" CheckedValue="HasSuggestedPersonel" Disabled="true">
                        <Radio Value="true" ReadOnly="true">Yes</Radio>
                        <Radio Value="false" ReadOnly="true">No</Radio>
                    </RadioGroup>
                </FieldBody>
            </Field>
            @if (HasSuggestedPersonel)
            {
                <Field>
                    <FieldLabel>@L["SuggestedPersonelName"]</FieldLabel>
                    <TextEdit Text="@PreviewEntity.SuggestedPersonelName" ReadOnly="true" />
                </Field>
                <Field>
                    <FieldLabel>@L["SuggestedJobTitle"]</FieldLabel>
                    <TextEdit Text="@PreviewEntity.SuggestedJobTitle" ReadOnly="true" />
                </Field>
                <Field>
                    <FieldLabel>@L["ReasonForSuggestion"]</FieldLabel>
                    <TextEdit Text="@PreviewEntity.ReasonForSuggestion" ReadOnly="true" />
                </Field>
            }
            <Field>
                <FieldLabel RequiredIndicator>@L["RequesterName"]</FieldLabel>
                <TextEdit Text="@PreviewEntity.RequesterName" ReadOnly="true" />
            </Field>
            <Field>
                <FieldLabel RequiredIndicator>@L["RequesterTitle"]</FieldLabel>
                <TextEdit Text="@PreviewEntity.RequesterTitle" ReadOnly="true" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="ClosePreviewModalAsync">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>



@code {
    //
    //Tanımlamalar
    //
    private List<LookupDto> departmentList = new();
    private List<LookupDto> managerList = new();

    private bool HasSuggestedPersonel = false;

    private string NewQualification = "";

    private PersonelRequestDto PreviewEntity = new();
    private Modal PreviewModalRef;
    private bool isPreviewModalVisible = false;
    //
    //Lokalizasyon Kaynağı
    //
    public PersonelRequest()
    {
        LocalizationResource = typeof(AltinayResource);
    }
    //
    //Önerilen Aday
    //
    protected override async Task OnInitializedAsync()
    {
        await GetDefaultFormListAsync();

        await base.OnInitializedAsync();
    }

    protected async Task GetDefaultFormListAsync()
    {
        departmentList = await DepartmentAppService.GetListAsync();
        managerList = await ManagerAppService.GetListAsync();
    }
    //
    //Gerekli Nitelikler Ekleme ve Silme
    //
    private async Task AddQualification()
    {
        var trimmed = NewQualification?.Trim();
        if (!string.IsNullOrWhiteSpace(trimmed))
        {
            await GetDefaultFormListAsync();

            NewEntity.OtherQualifications ??= new List<string>();

            if (!NewEntity.OtherQualifications.Contains(trimmed))
            {
                NewEntity.OtherQualifications.Add(trimmed);
                NewQualification = "";
            }
        }
    }
    private void RemoveQualification(string item)
    {
        NewEntity.OtherQualifications?.Remove(item);
    }
    //
    //İnceleme Modalı
    //
    private async Task OpenPreviewModalAsync(PersonelRequestDto entity)
    {
        PreviewEntity = entity;

        await PreviewModalRef.Show();
    }

    private async Task ClosePreviewModalAsync()
    {
        await PreviewModalRef.Hide();
    }

}
