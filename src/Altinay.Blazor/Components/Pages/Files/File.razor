@page "/file"
@using Altinay.Files
@using Altinay.Localization
@using Volo.Abp.AspNetCore.Components.Web
@inherits AltinayComponentBase
@inject IFileAppService FileAppService
@inject AbpBlazorMessageLocalizerHelper<AltinayResource> LH

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Files"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (CanCreateFile)
                {
                    <Button Color="Color.Primary"
                            Clicked="OpenCreateFileModal">
                        @L["NewFile"]
                    </Button>
                }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="FileDto"
                  Data="FileList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="FileDto"
                                Field="@nameof(FileDto.Id)"
                                Sortable="false"
                                Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (CanEditFile)
                                {
                                    <DropdownItem Clicked="() => OpenEditFileModal(context)">
                                        @L["Edit"]
                                    </DropdownItem>
                                }
                                @if (CanDeleteFile)
                                {
                                    <DropdownItem Clicked="() => DeleteFileAsync(context)">
                                        @L["Delete"]
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>

                <!-- Added columns as requested -->
                <DataGridColumn TItem="FileDto" Field="@nameof(FileDto.FileAlias)" Caption="File Alias" />
                <DataGridColumn TItem="FileDto" Field="@nameof(FileDto.FileDescription)" Caption="File Description" />
                <DataGridColumn TItem="FileDto" Field="@nameof(FileDto.IsActive)" Caption="Is Active" />
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<!-- Create Modal -->
<Modal @ref="CreateFileModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewFile"]</ModalTitle>
                <CloseButton Clicked="CloseCreateFileModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewFile" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["FileAlias"]</FieldLabel>
                            <TextEdit @bind-Text="@NewFile.FileAlias">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Description"]</FieldLabel>
                        <MemoEdit Rows="3" @bind-Text="@NewFile.FileDescription">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </MemoEdit>
                    </Field>
                    <Field>
                        <FieldLabel>@L["Active"]</FieldLabel>
                        <Switch @bind-Checked="@NewFile.IsActive" />
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateFileModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateFileAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<!-- Edit Modal -->
<Modal @ref="EditFileModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingFile.FileAlias</ModalTitle>
                <CloseButton Clicked="CloseEditFileModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@EditingFile" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["FileAlias"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingFile.FileAlias">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Description"]</FieldLabel>
                        <MemoEdit Rows="3" @bind-Text="@EditingFile.FileDescription">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </MemoEdit>
                    </Field>
                    <Field>
                        <FieldLabel>@L["Active"]</FieldLabel>
                        <Switch @bind-Checked="@EditingFile.IsActive" />
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditFileModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateFileAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
