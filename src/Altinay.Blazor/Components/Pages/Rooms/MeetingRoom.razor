@page "/meeting-bookings"
@using Altinay.Localization
@using Altinay.Meeting
@using Altinay.Meeting.CreateUpdateDtos
@using Altinay.Meeting.IAppServices
@using Altinay.Meeting.MeetingRoomDtos
@using Blazorise
@using Microsoft.Extensions.Localization
@using Volo.Abp
@using Volo.Abp.Application.Dtos
@using Volo.Abp.AspNetCore.Components.Web
@using Altinay.Blazor.Components.Pages
@using Blazorise.Scheduler

@inject IBookingAppService BookingAppService
@inject IRoomAppService RoomAppService
@inject IFloorAppService FloorAppService
@inject IStringLocalizer<AltinayResource> L


<Row>
    <Column ColumnSize="ColumnSize.Is10">
        <Tabs SelectedTab="@SelectedTab" SelectedTabChanged="@OnSelectedTabChanged">
            <Items>
                @foreach (var floor in Floor.AsEnumerable().Reverse())
                {
                    <Tab Name="@floor.Id.ToString()"> @floor.Name</Tab>
                }
            </Items>
            <Content>

                @foreach (var floor in Floor.AsEnumerable().Reverse())
                {
                    <TabPanel Name="@floor.Id.ToString()">
                        <Strong>@floor.Description</Strong>
                        <CardDeck>
                            @foreach (var room in floor.Rooms)
                            {
                                <Card>
                                    <CardBody Border="Border.Rounded">
                                        <CardTitle Size="3">Name: @room.Name</CardTitle>
                                        <CardText>
                                            Description: @room.Description <br />
                                            Capacity: @room.Capacity<b></b>
                                        </CardText>
                                        <Button Color="Color.Primary" Size="Size.Small">
                                            Book Room
                                        </Button>
                                    </CardBody>
                                </Card>
                            }
                        </CardDeck>
                    </TabPanel>
                }
            </Content>

        </Tabs>
    </Column>
    <Column ColumnSize="ColumnSize.IsAuto">
        <Button color="Color.Primary" Size="Size.Small" Clicked="OpenFloorModalAsync" Position="Position.Static">
            <Icon Name="IconName.PlusSquare" />
            @L["NewFloor"]
        </Button>
    </Column>
    <Column>
        <Button color="Color.Primary" Size="Size.Small" Clicked="OpenRoomModalAsync" Position="Position.Static">
            <Icon Name="IconName.PlusSquare" />
            @L["NewRoom"]
        </Button>
    </Column>
</Row>

<CreateFloorModal @ref="FloorModalRef"
                  Visible="IsCreateFloorVisible"
                  VisibleChanged="@(v => IsCreateFloorVisible = v)"
                  OnCreated="ReloadFloorsAsync" />

<CreateRoomModal @ref="RoomModalRef"
                 Visible="IsCreateRoomVisible"
                 VisibleChanged="@(v => IsCreateRoomVisible = v)"
                 FloorId="@SelectedFloorId"
                 OnCreated="ReloadRoomsAsync" />

@code {
    private List<FloorDto> Floor = new();
    private List<RoomDto> Rooms = new();
    private string SelectedTab;
    private bool IsCreateFloorVisible;
    private bool IsCreateRoomVisible;
    private CreateRoomModal RoomModalRef;
    private CreateFloorModal FloorModalRef;

    private Guid SelectedFloorId
    {
        get
        {
            return Guid.TryParse(SelectedTab, out var id) ? id : Guid.Empty;
        }
    }



    protected override async Task OnInitializedAsync()
    {
        await ReloadRoomsAsync();
        await ReloadFloorsAsync();
        await base.OnInitializedAsync();
    }

    private Task OnSelectedTabChanged(string name)
    {
        SelectedTab = name;
        return Task.CompletedTask;
    }

    private async Task OpenFloorModalAsync()
    {
        FloorModalRef?.Reset();
        IsCreateFloorVisible = true;
        await Task.CompletedTask;
    }

    private async Task OpenRoomModalAsync()
    {
        RoomModalRef?.Reset();
        IsCreateRoomVisible = true;
        await Task.CompletedTask;
    }

    private async Task ReloadFloorsAsync()
    {
        var result = await FloorAppService.GetListAsync(new PagedAndSortedResultRequestDto());
        var floorList = result.Items.ToList();

        foreach (var floor in floorList)
        {
            var roomResult = await RoomAppService.GetListAsync(new RoomInputListDto
            {
                FloorID = floor.Id
            });

            floor.Rooms = roomResult.Items.ToList();
        }

        Floor = floorList;

        if (Floor.Any() && string.IsNullOrWhiteSpace(SelectedTab))
        {
            SelectedTab = Floor.First().Id.ToString();
        }
    }
    private async Task ReloadRoomsAsync()
    {
        if (SelectedFloorId != Guid.Empty)
        {
            var result = await RoomAppService.GetListAsync(new RoomInputListDto
            {
                FloorID = SelectedFloorId
            });

            Rooms = result.Items.ToList();
        }
    }





}
