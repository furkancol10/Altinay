@page "/meeting-bookings"
@using Altinay.Localization
@using Altinay.Meeting
@using Altinay.Meeting.CreateUpdateDtos
@using Altinay.Meeting.IAppServices
@using Altinay.Meeting.MeetingRoomDtos
@using Blazorise
@using Microsoft.Extensions.Localization
@using Volo.Abp
@using Volo.Abp.Application.Dtos
@using Volo.Abp.AspNetCore.Components.Web
@using Altinay.Blazor.Components.Pages
@using Blazorise.Scheduler

@inject IBookingAppService BookingAppService
@inject IRoomAppService RoomAppService
@inject IFloorAppService FloorAppService
@inject IStringLocalizer<AltinayResource> L

@inherits AbpCrudPageBase<IBookingAppService, BookingDto, Guid, BookingInputListDto, CreateUpdateBookingDto>

<Row>
    <Column ColumnSize="ColumnSize.Is10">
        <Tabs SelectedTab="@SelectedTab" SelectedTabChanged="@OnSelectedTabChanged">
            <Items>
                @foreach (var floor in Floors.AsEnumerable().Reverse())
                {
                    <Tab Name="@floor.Id.ToString()"> @floor.Name</Tab>
                }
            </Items>
            <Content>

                @foreach (var floor in Floors.AsEnumerable().Reverse())
                {
                    <TabPanel Name="@floor.Id.ToString()">
                        <Strong>@floor.Description</Strong>
                        <CardDeck>
                            @foreach (var room in floor.Rooms)
                            {
                                <Card>
                                    <CardBody Border="Border.Rounded">
                                        <CardTitle Size="3">Name: @room.Name</CardTitle>
                                        <CardText>
                                            Description: @room.Description <br />
                                            Capacity: @room.Capacity<b></b>
                                        </CardText>
                                        <Button Color="Color.Primary" Size="Size.Small" Position="Position.Static" Clicked="() => OpenBookingModalAsync(room)">
                                            Book Room
                                        </Button>
                                    </CardBody>
                                </Card>
                            }
                        </CardDeck>
                    </TabPanel>
                }
            </Content>

        </Tabs>
    </Column>
    <Column ColumnSize="ColumnSize.IsAuto">
        <Button color="Color.Primary" Size="Size.Small" Clicked="OpenFloorModalAsync" Position="Position.Static">
            <Icon Name="IconName.PlusSquare" />
            @L["NewFloor"]
        </Button>
    </Column>
    <Column>
        <Button color="Color.Primary" Size="Size.Small" Clicked="OpenRoomModalAsync" Position="Position.Static">
            <Icon Name="IconName.PlusSquare" />
            @L["NewRoom"]
        </Button>
    </Column>
</Row>

<Modal @ref="BookingModalRef" Visible="@Visible" VisibleChanged="@VisibleChanged">
    <ModalContent IsCentered="true" Size="ModalSize.ExtraLarge" Height="Height.Auto">
        <ModalHeader>
            <ModalTitle>Book Room: @RoomName</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Scheduler TItem="Appointment" @bind-Date="@selectedDate" Data="@Appointments" SelectedView="SchedulerView.Week"
                       Editable
                       SlotSelectionMode="SchedulerSlotSelectionMode.Mouse">
                <SchedulerToolbar />
                <SchedulerViews>
                    <SchedulerWeekView StartTime="@startTime" EndTime="@endTime" WorkDayStart="@workDayStart" WorkDayEnd="@workDayEnd" />
                </SchedulerViews>
            </Scheduler>
        </ModalBody>
    </ModalContent>
</Modal>

<CreateFloorModal @ref="FloorModalRef"
                  Visible="IsCreateFloorVisible"
                  VisibleChanged="@(v => IsCreateFloorVisible = v)"
                  OnCreated="ReloadFloorsAsync" />

<CreateRoomModal @ref="RoomModalRef"
                 Visible="IsCreateRoomVisible"
                 VisibleChanged="@(v => IsCreateRoomVisible = v)"
                 FloorId="@SelectedFloorId"
                 OnCreated="ReloadRoomsAsync" />

@* <CreateBookingModal @ref="BookingModalRef"
                    Visible="IsCreateBookingVisible"
                    VisibleChanged="@(v => IsCreateBookingVisible = v)"
                    RoomId="@SelectedRoomId"
                    RoomName="@SelectedRoomName"/> *@

@code {
    [Parameter] public Guid RoomId { get; set; }
    [Parameter] public String RoomName { get; set; } = "";
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    private List<FloorDto> Floors = new();
    private List<RoomDto> Rooms = new();
    List<Appointment> Appointments = new List<Appointment>();

    private string SelectedTab;
    private string SelectedRoomName;

    private bool IsCreateFloorVisible;
    private bool IsCreateRoomVisible;
    private bool IsCreateBookingVisible;

    private CreateRoomModal RoomModalRef;
    private CreateFloorModal FloorModalRef;
    private Modal BookingModalRef;


    private Validations CreateValidations;


    private DateOnly selectedDate = DateOnly.FromDateTime(DateTime.Today);
    private SchedulerView selectedView = SchedulerView.Week;
    private TimeOnly startTime = new TimeOnly(8, 0);
    private TimeOnly endTime = new TimeOnly(18, 0);
    private TimeOnly workDayStart = new TimeOnly(8, 0);
    private TimeOnly workDayEnd = new TimeOnly(18, 0);

    private Guid SelectedRoomId;
    private Guid SelectedFloorId
    {
        get
        {
            return Guid.TryParse(SelectedTab, out var id) ? id : Guid.Empty;
        }
    }
    //
    //Functions
    //
    protected override async Task OnInitializedAsync()
    {
        await ReloadRoomsAsync();
        await ReloadFloorsAsync();
        await ShowAsync();
        await base.OnInitializedAsync();
    }

    private Task OnSelectedTabChanged(string name)
    {
        SelectedTab = name;
        return Task.CompletedTask;
    }

    private async Task OpenFloorModalAsync()
    {
        FloorModalRef?.Reset();
        IsCreateFloorVisible = true;
        await Task.CompletedTask;
    }

    private async Task OpenRoomModalAsync()
    {
        RoomModalRef?.Reset();
        IsCreateRoomVisible = true;
        await Task.CompletedTask;
    }

    private async Task ReloadFloorsAsync()
    {
        var result = await FloorAppService.GetListAsync(new PagedAndSortedResultRequestDto());
        var floorList = result.Items.ToList();

        foreach (var floor in floorList)
        {
            var roomResult = await RoomAppService.GetListAsync(new RoomInputListDto
            {
                FloorID = floor.Id
            });

            floor.Rooms = roomResult.Items.ToList();
        }

        Floors = floorList;

        if (Floors.Any() && string.IsNullOrWhiteSpace(SelectedTab))
        {
            SelectedTab = Floors.First().Id.ToString();
        }
    }
    private async Task ReloadRoomsAsync()
    {
        if (SelectedFloorId != Guid.Empty)
        {
            var result = await RoomAppService.GetListAsync(new RoomInputListDto
            {
                FloorID = SelectedFloorId
            });

            Rooms = result.Items.ToList();
        }
    }    

    private async Task OpenBookingModalAsync(RoomDto room)
    {
        SelectedRoomId = room.Id;
        SelectedRoomName = room.Name;

        IsCreateBookingVisible = true;      
        await ShowAsync();                  
    }

    public class Appointment
    {
        public Appointment()
        {
        }

        public Appointment(string title, string description, DateTime start, DateTime end, bool allDay = false)
        {
            Id = Guid.NewGuid().ToString();
            Title = title;
            Description = description;
            Start = start;
            End = end;
            AllDay = allDay;
        }

        public string Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public bool AllDay { get; set; } = false;
        public string RecurrenceRule { get; set; }
    }


    public async Task ShowAsync()
    {
        var result = await BookingAppService.GetListAsync(new BookingInputListDto
        {
            RoomID = RoomId
        });

        Appointments = result.Items.Select(x =>
            new Appointment(
                x.MeetingTitle,
                x.Participants,
                x.StartTime,
                x.EndTime,
                false
            )
        ).ToList();
    }

}
