@using Altinay
@using Altinay.Meeting
@using Altinay.Meeting.CreateUpdateDtos
@using Altinay.Meeting.IAppServices
@using Altinay.Meeting.MeetingRoomDtos
@using Blazorise
@using Blazorise.Scheduler
@using Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Validation
@inject IBookingAppService BookingAppService
@inject IStringLocalizer<AltinayResource> L
@* @inherits AltinayComponentBase *@
@inherits AbpCrudPageBase<IBookingAppService, BookingDto, Guid, BookingInputListDto, CreateUpdateBookingDto>

<Modal @ref="ModalRef" Visible="@Visible" VisibleChanged="@VisibleChanged">
    <ModalContent IsCentered="true" Size="ModalSize.ExtraLarge" Height="Height.Auto">
        <ModalHeader>
            <ModalTitle>Book Room: @RoomName</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Scheduler TItem="Appointment" @bind-Date="@selectedDate" Data="@Appointments" SelectedView="SchedulerView.Week"
                       Editable
                       SlotSelectionMode="SchedulerSlotSelectionMode.Mouse">
                       <SchedulerToolbar />
                       <SchedulerViews>
                           <SchedulerWeekView StartTime="@startTime" EndTime="@endTime" WorkDayStart="@workDayStart" WorkDayEnd="@workDayEnd" />
                       </SchedulerViews>
            </Scheduler>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Info" Clicked="@ShowAsync"> @L["Save"]</Button>
        </ModalFooter>
    </ModalContent>

</Modal>


@code {
    [Parameter] public Guid RoomId { get; set; }
    [Parameter] public String RoomName { get; set; } = "";
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    private Modal ModalRef;
    private Validations CreateValidations;

    private DateOnly selectedDate = DateOnly.FromDateTime(DateTime.Today);
    private SchedulerView selectedView = SchedulerView.Week;
    private TimeOnly startTime = new TimeOnly(8, 0);
    private TimeOnly endTime = new TimeOnly(18, 0);
    private TimeOnly workDayStart = new TimeOnly(8, 0);
    private TimeOnly workDayEnd = new TimeOnly(18, 0);

    public class Appointment
    {
        public Appointment()
        {
        }

        public Appointment(string title, string description,DateTime start,DateTime end, bool allDay= false)
        {
            Id = Guid.NewGuid().ToString();
            Title = title;
            Description = description;
            Start = start;
            End = end;
            AllDay = allDay;
        }

        public string Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public bool AllDay { get; set; } = false;
        public string RecurrenceRule { get; set; }
    }

    List<Appointment> Appointments = new List<Appointment>();

    public async Task ShowAsync()
    {
        var result = await BookingAppService.GetListAsync(new BookingInputListDto
        {
            RoomID = RoomId
        });

        Appointments = result.Items.Select(x =>
            new Appointment(
                x.MeetingTitle,
                x.Participants,
                x.StartTime,
                x.EndTime,
                false
            )
        ).ToList();
    }

    

    
    
}
