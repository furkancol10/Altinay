@using Altinay
@using Altinay.Meeting
@using Altinay.Meeting.CreateUpdateDtos
@using Altinay.Meeting.IAppServices
@using Altinay.Meeting.MeetingRoomDtos
@using Blazorise
@using Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@inject IFloorAppService FloorAppService
@inject IBookingAppService BookingAppService
@inject IRoomAppService RoomAppService
@inject IStringLocalizer<AltinayResource> L
@* @inherits AltinayComponentBase *@
@inherits AbpCrudPageBase<IFloorAppService, FloorDto, Guid, FloorInputListDto, CreateUpdateFloorDto>

<Modal @ref="CreateFloorModalRef" Visible="@Visible" VisibleChanged="@VisibleChanged">
    <ModalContent IsCentered="True">
        <ModalHeader>
            <ModalTitle>@L["NewFloor"]</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Validations @ref="@CreateValidations" Model="@NewEntity">
                <Field>
                    <FieldLabel RequiredIndicator>@L["FloorName"]</FieldLabel>
                    <TextEdit @bind-Text="@NewEntity.Name" />
                </Field>
                <Field>
                    <FieldLabel RequiredIndicator>@L["FloorDescription"]</FieldLabel>
                    <TextEdit @bind-Text="@NewEntity.Description" />
                </Field>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary"
                    Clicked="CloseCreateModalAsync">
                @L["Cancel"]
            </Button>
            <Button Color="Color.Primary"
                    Type="ButtonType.Submit"
                    Clicked="CreateAsync"
                    PreventDefaultOnSubmit="true">
                @L["Save"]
            </Button>
        </ModalFooter>
    </ModalContent>   
</Modal>


@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public EventCallback OnCreated { get; set; }

    private CreateUpdateFloorDto NewEntity = new();
    private Modal CreateFloorModalRef;
    private Validations CreateValidations;

    public void Reset()
    {
        NewEntity = new CreateUpdateFloorDto();       
        
        CreateValidations?.ClearAll();
        
    }
    private async Task CreateAsync()
    {
        if (await CreateValidations.ValidateAll())
        {
            await FloorAppService.CreateAsync(NewEntity);
            await VisibleChanged.InvokeAsync(false);
            await OnCreated.InvokeAsync();
        }
    }
    private async Task CloseCreateModalAsync()
    {
        await VisibleChanged.InvokeAsync(false);
    }
}
